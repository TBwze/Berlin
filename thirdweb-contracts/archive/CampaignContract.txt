// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

import "./RewardContract.sol";

contract CampaignContract {
    struct Campaign {
        address owner;
        string title;
        string description;
        string information;
        uint256 target;
        uint256 deadline;
        uint256 amountCollected;
        string image;
        address[] donators;
        uint256[] donations;
    }

    RewardContract public rewardContract;
    mapping(uint256 => Campaign) public campaigns;
    uint256 public numberOfCampaigns = 0;

    constructor(address _rewardContract) {
        rewardContract = RewardContract(_rewardContract);
    }

    // Create and read
    function createCampaign(
        address _owner,
        string memory _title,
        string memory _description,
        string memory _information,
        uint256 _target,
        uint256 _deadline,
        string memory _image,
        uint256 _bronzeMin,
        uint256 _silverMin,
        uint256 _goldMin,
        string memory _bronzeDescription,
        string memory _silverDescription,
        string memory _goldDescription
    ) public returns (uint256) {
        require(_deadline > block.timestamp, "Deadline must be in the future.");

        Campaign storage campaign = campaigns[numberOfCampaigns];
        campaign.owner = _owner;
        campaign.title = _title;
        campaign.description = _description;
        campaign.information = _information;
        campaign.target = _target;
        campaign.deadline = _deadline;
        campaign.image = _image;

        rewardContract.createReward(
            numberOfCampaigns,
            _bronzeMin,
            _silverMin,
            _goldMin,
            _bronzeDescription,
            _silverDescription,
            _goldDescription
        );

        numberOfCampaigns++;

        return numberOfCampaigns - 1;
    }

    

    function getAllCampaigns()
        public
        view
        returns (
            address[] memory owners,
            string[] memory titles,
            string[] memory descriptions,
            string[] memory informations,
            uint256[] memory targets,
            uint256[] memory deadlines,
            uint256[] memory amountCollected,
            string[] memory images,
            RewardContract.Reward[] memory rewards
        )
    {
        owners = new address[](numberOfCampaigns);
        titles = new string[](numberOfCampaigns);
        descriptions = new string[](numberOfCampaigns);
        informations = new string[](numberOfCampaigns);
        targets = new uint256[](numberOfCampaigns);
        deadlines = new uint256[](numberOfCampaigns);
        amountCollected = new uint256[](numberOfCampaigns);
        images = new string[](numberOfCampaigns);
        rewards = new RewardContract.Reward[](numberOfCampaigns);

        for (uint256 i = 0; i < numberOfCampaigns; i++) {
            Campaign storage campaign = campaigns[i];
            owners[i] = campaign.owner;
            titles[i] = campaign.title;
            descriptions[i] = campaign.description;
            informations[i] = campaign.information;
            targets[i] = campaign.target;
            deadlines[i] = campaign.deadline;
            amountCollected[i] = campaign.amountCollected;
            images[i] = campaign.image;

            // Fetch the reward information from the reward contract
            rewards[i] = rewardContract.getReward(i);
        }
    }

    function getDonators(
        uint256 _campaignId
    ) public view returns (address[] memory, uint256[] memory) {
        Campaign storage campaign = campaigns[_campaignId];
        return (campaign.donators, campaign.donations);
    }

    // Payment and rewards
    function donateToCampaign(uint256 _id) public payable {
        uint256 amount = msg.value;

        Campaign storage campaign = campaigns[_id];
        campaign.donators.push(msg.sender);
        campaign.donations.push(amount);

        (bool sent, ) = payable(campaign.owner).call{value: amount}("");
        require(sent, "Failed to send donation to the campaign owner.");

        campaign.amountCollected += amount;
    }

    function claimReward(uint256 _campaignId) public {
        uint256 contribution = getContribution(_campaignId, msg.sender);
        require(contribution > 0, "No contributions found for this campaign.");

        rewardContract.claimReward(_campaignId, msg.sender, contribution);
    }

    function getContribution(
        uint256 _id,
        address _donor
    ) public view returns (uint256) {
        Campaign storage campaign = campaigns[_id];
        uint256 contribution = 0;
        for (uint256 i = 0; i < campaign.donators.length; i++) {
            if (campaign.donators[i] == _donor) {
                contribution += campaign.donations[i];
            }
        }
        return contribution;
    }
}
